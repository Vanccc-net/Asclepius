services:
  
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: auth_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    command:
      [
        "postgres",
        "-c", "max_connections=550",
        "-c", "log_min_duration_statement=100ms",
        "-c", "log_duration=on"
      ]
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d auth_db" ]
      interval: 5s
      timeout: 5s
      retries: 5
  
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log
  
  rabbitmq:
    image: rabbitmq:3-management  # Uses a specific management version
    container_name: rabbitmq
    ports:
      - "5672:5672"   # AMQP protocol port
      - "15672:15672" # Management UI port
    environment:
      RABBITMQ_DEFAULT_USER: guest      # Set your username
      RABBITMQ_DEFAULT_PASS: guest  # Set your password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
  
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_LOG_RETENTION_HOURS: 168
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 5
  
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --save 60 1 --requirepass admin
  
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - asclepius.auth.api
  
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    depends_on:
      - prometheus
  
  asclepius.auth.api:
    image: asclepius.auth.api
    container_name: asclepius.auth.service
    ports:
      - "8080:8080"
      - "8081:8081"
    build:
      context: .
      dockerfile: Asclepius.Auth.Api/Dockerfile
    depends_on:
      - postgres
      - redis
      - zookeeper
      - rabbitmq
      
      #  asclepius.notification.worker:
      #    image: asclepius.notification.worker
      #    container_name: asclepius.notification.service
      #    build:
      #      context: .
      #      dockerfile: Asclepius.Notification.Worker/Dockerfile
      #    depends_on:
      #      - zookeeper
      #      - kafka
      #      - asclepius.auth.api
      #  
      #  asclepius.profile.api:
      #    image: asclepius.profile.api
      #    container_name: asclepius.profile.service
      #    ports:
      #      - "8085:8080"
      #      - "8086:8080"
      #    build:
      #      context: .
      #      dockerfile: Asclepius.Profile.Api/Dockerfile
      #    depends_on:
      #      - postgres
      #      - redis
      #      - rabbitmq
      #      - prometheus
      #  
      #  asclepius.telegram.worker:
      #    image: asclepius.telegram.worker
      #    container_name: asclepius.telegram.service
      #    build:
      #      context: .
      #      dockerfile: Asclepius.Telegram.Worker/Dockerfile
      #      
      #  telesfor.eq.api:
      #    image: telesfor.eq.api
      #    build:
      #      context: .
      #      dockerfile: Telesfor.EQ.Api/Dockerfile
      #  
      #  telesfor.emr.api:
      #    image: telesfor.emr.api
      #    build:
      #      context: .
      #      dockerfile: Telesfor.EMR.Api/Dockerfile

volumes:
  postgres_data:
  redis_data:
  zookeeper-data:
  zookeeper-log:
  kafka-data:
  grafana-storage:
  rabbitmq_data:
  
